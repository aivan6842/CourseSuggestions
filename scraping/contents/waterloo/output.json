[
{"courseCode": "CS 100", "courseName": "Introduction to Computing Through Applications", "courseDescription": "Using personal computers as effective problem solving tools for the present and the future. Effective use of spreadsheets to process, manipulate, and visualize numeric and textual information. Introduction to the Internet, World Wide Web, HTML, and XML. Algorithms underlying the functional components of web search engines and their influence on data access. Using wikis to publish, reshape, and organize data collaboratively. [Offered: F,W,S]"},
{"courseCode": "CS 105", "courseName": "Introduction to Computer Programming 1", "courseDescription": "An introduction to the fundamentals of computer programming through media computation. Students will learn to write interactive graphical programs. Fundamental language concepts such as variables, conditionals, loops, functions, and arrays. Programming concepts such as coding style, modular design, testing, and debugging.  Media concepts such as 2D graphics drawing, input, animation, and image processing. [Offered: F]"},
{"courseCode": "CS 106", "courseName": "Introduction to Computer Programming 2", "courseDescription": "A continuation of the introduction to computer programming begun in CS 105. The use of programming, in conjunction with libraries, as a means of solving practical problems in art, design, and data processing. Basic text processing, manipulation of images and sound, handling and visualization of tabular and hierarchical data. Introductions to user interfaces, physical simulation, and object-oriented programming. [Offered: W]"},
{"courseCode": "CS 114", "courseName": "Principles of Computing for Science", "courseDescription": "Introduction to basic imperative programming principles; programming concepts including functions, flow control, lists, arrays; numerical accuracy and efficiency; data analysis and general-purpose algorithms. Introduction to object-oriented programming concepts."},
{"courseCode": "CS 115", "courseName": "Introduction to Computer Science 1", "courseDescription": "An introduction to the fundamentals of computer science through the application of elementary programming patterns in the functional style of programming. Function definition and application. Tracing via substitution. Design, testing, and documentation. Recursive data definitions. Lists and trees. Functional and data abstraction. "},
{"courseCode": "CS 116", "courseName": "Introduction to Computer Science 2", "courseDescription": "This course builds on the techniques and patterns learned in CS 115 while making the transition to use of an imperative language. Generative and structural recursion. Mutation (assignment) and its role in an imperative language. Primitive types and basic I/O. Sequencing, selection, looping. Function definition and use. File and console I/O. Issues in computer science. [Offered: F,W,S]"},
{"courseCode": "CS 135", "courseName": "Designing Functional Programs", "courseDescription": "An introduction to the fundamentals of computer science through the application of elementary programming patterns in the functional style of programming. Syntax and semantics of a functional programming language. Tracing via substitution. Design, testing, and documentation. Linear and nonlinear data structures. Recursive data definitions. Abstraction and encapsulation. Generative and structural recursion. Historical context.  "},
{"courseCode": "CS 136", "courseName": "Elementary Algorithm Design and Data Abstraction", "courseDescription": "This course builds on the techniques and patterns learned in CS 135 while making the transition to use an imperative language. It introduces the design and analysis of algorithms, the management of information, and the programming mechanisms and methodologies required in implementations. Topics discussed include iterative and recursive sorting algorithms; lists, stacks, queues, trees, and their application; abstract data types and their implementations. "},
{"courseCode": "CS 136L", "courseName": "Tools and Techniques for Software Development", "courseDescription": "This course introduces students to tools and techniques useful in the software development lifecycle. Students learn to navigate and leverage commands and utilities in the Linux Command Line Shell. Students gain experience in version control software, writing scripts to automate tasks, and creating effective test cases to identify bugs. Tracing and debugging strategies are discussed. Students also gain experience in using built-in support for version control, testing, debugging, build automation, etc. in integrated development environments (IDEs). "},
{"courseCode": "CS 137", "courseName": "Programming Principles", "courseDescription": "Review of fundamental programming concepts and their application. Procedures and parameter passing. Arrays and structures. Recursion.  Sorting. Pointers and simple dynamic structures.  Space and time analysis of designs. Design methodologies. [Offered: F]"},
{"courseCode": "CS 138", "courseName": "Introduction to Data Abstraction and Implementation", "courseDescription": "Software abstractions via elementary data structures and their implementation; encapsulation and modularity; class and interface definitions; object instantiation; recursion; elementary abstract data types, including sequences, stacks, queues, and trees; implementation using linked structures and arrays; vectors and strings; memory models; automatic vs. dynamic memory management. "},
{"courseCode": "CS 145", "courseName": "Designing Functional Programs (Advanced Level)", "courseDescription": "CS 145 is an advanced-level version of CS 135. "},
{"courseCode": "CS 146", "courseName": "Elementary Algorithm Design and Data Abstraction (Advanced Level)", "courseDescription": "CS 146 is an advanced-level version of CS 136. "},
{"courseCode": "CS 200", "courseName": "Concepts for Advanced Computer Usage", "courseDescription": "Important concepts underlying major personal computer application categories; methodologies for learning and evaluating software; operating system and hardware design from the user's point of view, with implications for maintaining a personal computer. Students are encouraged to use their own personal computer for assignments.  Social media and the effect of technology on society are explored throughout the course. [Offered: W,S]"},
{"courseCode": "CS 230", "courseName": "Introduction to Computers and Computer Systems", "courseDescription": "Basic computer architecture, organization, system services, and software. Typology of  processors, memory, I/O devices, and their performance. "},
{"courseCode": "CS 231", "courseName": "Algorithmic Problem Solving", "courseDescription": "The study of the steps required to solve real-world problems on a computer, including problem specification, choice of algorithmic paradigm, analysis, and implementation.  Topics include exhaustive search, divide and conquer, greedy, and dynamic programming approaches. "},
{"courseCode": "CS 234", "courseName": "Data Types and Structures", "courseDescription": "Top-down design of data structures. Using representation-independent data types. Introduction to commonly used data types, including lists, sets, mappings, and trees. Selection of data representation. "},
{"courseCode": "CS 240", "courseName": "Data Structures and Data Management", "courseDescription": "Introduction to widely used and effective methods of data organization, focusing on data structures, their algorithms, and the performance of these algorithms. Specific topics include priority queues, sorting, dictionaries, data structures for text processing. "},
{"courseCode": "CS 240E", "courseName": "Data Structures and Data Management (Enriched)", "courseDescription": "Enriched version of CS 240. "},
{"courseCode": "CS 241", "courseName": "Foundations of Sequential Programs", "courseDescription": "The relationship between high-level languages and the computer architecture that underlies their implementation, including basic machine architecture, assemblers, specification and translation of programming languages, linkers and loaders, block-structured languages, parameter passing mechanisms, and comparison of programming languages. "},
{"courseCode": "CS 241E", "courseName": "Foundations of Sequential Programs (Enriched)", "courseDescription": "Enriched version of CS 241. "},
{"courseCode": "CS 245", "courseName": "Logic and Computation", "courseDescription": "Logic as a tool for representation, reasoning, and computation. Propositional and predicate logic. Formalizing the notions of correct and incorrect reasoning, defining what is computable, and exploring the limits of computation. Godel's Incompleteness Theorem. Applications of logic to computer science."},
{"courseCode": "CS 245E", "courseName": "Logic and Computation (Enriched)", "courseDescription": "Enriched version of CS 245. "},
{"courseCode": "CS 246", "courseName": "Object-Oriented Software Development", "courseDescription": "Introduction to object-oriented programming and to tools and techniques for software development. Designing, coding, debugging, testing, and documenting medium-sized programs: reading specifications and designing software to implement them; selecting appropriate data structures and control structures; writing reusable code; reusing existing code; basic performance issues; debuggers; test suites. "},
{"courseCode": "CS 246E", "courseName": "Object-Oriented Software Development (Enriched)", "courseDescription": "Enriched version of CS 246. "},
{"courseCode": "CS 247", "courseName": "Software Engineering Principles", "courseDescription": "Systematic methods for designing, coding, testing, and documenting medium-sized programs. Major topics include abstraction, modularity, software modeling, object-oriented programming and design, generic programming, testing and debugging. "},
{"courseCode": "CS 251", "courseName": "Computer Organization and Design", "courseDescription": "Overview of computer organization and performance. Basics of digital logic design. Combinational and sequential elements. Data representation and manipulation. Basics of processor design. Pipelining. Memory hierarchies. Multiprocessors. "},
{"courseCode": "CS 251E", "courseName": "Computer Organization and Design (Enriched)", "courseDescription": "Enriched version of CS 251. "},
{"courseCode": "CS 330", "courseName": "Management Information Systems", "courseDescription": "An introduction to information systems and their strategic role in business. Topics include types of information systems, organizational requirements, systems development strategies, decision support systems, data and information management, and information systems management, control and implementation. [Offered: F,W,S]"},
{"courseCode": "CS 335", "courseName": "Computational Methods in Business and Finance", "courseDescription": "An introduction to numerical methods for business and finance. Floating-point arithmetic, interpolation. Methods for portfolio optimization and contingent-claims valuation. Solution of nonlinear equations. Monte Carlo methods, lattice methods, simulation of hedging strategies. [Offered: F,W]"},
{"courseCode": "CS 338", "courseName": "Computer Applications in Business: Databases", "courseDescription": "A user-oriented approach to the management of large collections of data. Methods used for the storage, selection, and presentation of data. Common database management systems. "},
{"courseCode": "CS 341", "courseName": "Algorithms", "courseDescription": "The study of efficient algorithms and effective algorithm design techniques. Program design with emphasis on pragmatic and mathematical aspects of program efficiency. Topics include divide and conquer algorithms, recurrences, greedy algorithms, dynamic programming, graph search and backtrack, problems without algorithms, NP-completeness and its implications. "},
{"courseCode": "CS 343", "courseName": "Concurrent and Parallel Programming", "courseDescription": "An introduction to concurrent and parallel programming, with an emphasis on language constructs. Major topics include exceptions, coroutines, atomic operations, critical sections, mutual exclusion, semaphores, high-level concurrency, deadlock, interprocess communication, process structuring, shared memor,y and distributed architectures. Students will learn how to structure, implement, and debug concurrent programs. "},
{"courseCode": "CS 346", "courseName": "Application Development", "courseDescription": "Introduction to full-stack application design and development. Students will work in project teams to design and build complete, working applications and services using standard tools. Topics include best-practices in design, development, testing, and deployment."},
{"courseCode": "CS 348", "courseName": "Introduction to Database Management", "courseDescription": "The main objective of this course is to introduce students to fundamentals of database technology by studying databases from three viewpoints: those of the database user, the database designer, and the database administrator. It teaches the use of a database management system (DBMS) by treating it as a black box, focusing only on its functionality and its interfaces. Topics include introduction to database systems, relational database systems, database design methodology, SQL and interfaces, database application development, concept of transactions, ODBC, JDBC, database tuning, database administration, and current topics (distributed databases, data warehouses, data mining). "},
{"courseCode": "CS 349", "courseName": "User Interfaces", "courseDescription": "An introduction to contemporary user interfaces, including the basics of human-computer interaction, the user interface design/evaluation process, the event abstraction, user interface components, specification of user interfaces, and the architectures within which user interfaces are developed. Implementation and evaluation of a typical user interface is considered. "},
{"courseCode": "CS 350", "courseName": "Operating Systems", "courseDescription": "An introduction to the fundamentals of operating system function, design, and implementation. Topics include concurrency, synchronization, processes, threads, scheduling, memory management, file systems, device management, and security. "},
{"courseCode": "CS 360", "courseName": "Introduction to the Theory of Computing", "courseDescription": "Models of computers including finite automata and Turing machines. Basics of formal languages with applications to the syntax of programming languages. Alternate characterizations of language classes. Proving unrecognizability.  Unsolvable problems and their relevance to the semantics of programming. "},
{"courseCode": "CS 365", "courseName": "Models of Computation", "courseDescription": "Finite automata and regular expressions. Pushdown automata and context-free grammars. Turing machines and undecidability. Time and space complexity. Diagonalization and hierarchies. CS 365 covers the material in CS 360 at an accelerated pace plus additional topics in computational complexity.  "},
{"courseCode": "CS 370", "courseName": "Numerical Computation", "courseDescription": "Principles and practices of basic numerical computation as a key aspect of scientific computation. Visualization of results. Approximation by splines, fast Fourier transforms, solution of linear and nonlinear equations, differential equations, floating point number systems, error, stability. Presented in the context of specific applications to image processing, analysis of data, scientific modeling. "},
{"courseCode": "CS 371", "courseName": "Introduction to Computational Mathematics", "courseDescription": "A rigorous introduction to the field of computational mathematics. The focus is on the interplay between continuous  models and  their solution via discrete processes. Topics include pitfalls in computation, solution of linear systems, interpolation, discrete Fourier transforms, and numerical integration. Applications are used as motivation. "},
{"courseCode": "CS 383", "courseName": "Computational Digital Art Studio", "courseDescription": "An upper-level studio course to create computational projects that function as art works and aesthetic experiences. Students will work in an interdisciplinary environment to combine computer science principles with fine art technical and conceptual skills. [Offered: W]"},
{"courseCode": "CS 398", "courseName": "Topics in Computer Science", "courseDescription": "See the Course Offerings List for topics available."},
{"courseCode": "CS 399", "courseName": "Readings in Computer Science", "courseDescription": "Reading course as announced by the School."},
{"courseCode": "CS 430", "courseName": "Applications Software Engineering", "courseDescription": "An investigation into the role and function of software engineering practice in the construction of computer based systems. Topics include: requirements and specification; documentation techniques; analysis and design; implementation; testing and maintenance; management issues. [Offered: F,W]"},
{"courseCode": "CS 431", "courseName": "Data-Intensive Distributed Analytics", "courseDescription": "Introduces non-CS major students to infrastructure for data-intensive analytics, with a focus on abstractions, frameworks, and algorithms that allow developers to distribute computation across many machines. Topics include core concepts (partitioning, replication, locality, consistency), computational models (MapReduce, dataflows, stream processing, bulk-synchronous parallel), and applications. [Offered: F,W]"},
{"courseCode": "CS 436", "courseName": "Networks and Distributed Computer Systems", "courseDescription": "An introduction to networks, protocols, and distributed systems. Layered models, resource management, naming, addressing and routing, reliable communication, security, and higher-level services. "},
{"courseCode": "CS 442", "courseName": "Principles of Programming Languages", "courseDescription": "An exposure to important concepts and issues in contemporary programming languages. Data types, abstraction, and polymorphism. Program structure. Lambda calculus and functional programming, logic programming, object-oriented programming. Semantics of programming languages. Critical comparison of language features and programming methodologies using examples drawn from a variety of programming languages including Lisp, Prolog, ML, Ada, Smalltalk, Icon, APL, and Lucid. Programming assignments involve the use of some of these languages. "},
{"courseCode": "CS 444", "courseName": "Compiler Construction", "courseDescription": "Phases of compilation. Lexical analysis and a review of parsing. Compiler-compilers and translator writing systems. LEX and YACC. Scope rules, block structure, and symbol tables. Runtime stack management. Parameter passage mechanisms. Stack storage organization and templates. Heap storage management. Intermediate code. Code generation. Macros. "},
{"courseCode": "CS 445", "courseName": "Software Requirements Specification and Analysis", "courseDescription": "Introduces students to the requirements definition phase of software development. Models, notations, and processes for software requirements identification, representation, analysis, and validation. Cost estimation from early documents and specifications. "},
{"courseCode": "CS 446", "courseName": "Software Design and Architectures", "courseDescription": "Introduces students to the design, implementation, and evolution phases of software development. Software design processes, methods, and notation. Implementation of designs. Evolution of designs and implementations. Management of design activities. "},
{"courseCode": "CS 447", "courseName": "Software Testing, Quality Assurance, and Maintenance", "courseDescription": "Introduces students to systematic testing of software systems. Software verification, reviews, metrics, quality assurance, and prediction of software reliability and availability. Related management issues. "},
{"courseCode": "CS 448", "courseName": "Database Systems Implementation", "courseDescription": "The objective of this course is to introduce students to fundamentals of building a relational database management system. The course focuses on the database engine core technology by studying topics such as storage management (data layout, disk-based data structures), indexing, query processing algorithms, query optimization, transactional concurrency control, logging and recovery. "},
{"courseCode": "CS 449", "courseName": "Human-Computer Interaction", "courseDescription": "An introduction to the fundamental theories, methods, and research in the design and evaluation of novel computational artifacts designed to meet real-world human needs. "},
{"courseCode": "CS 450", "courseName": "Computer Architecture", "courseDescription": "The course is intended to provide the student with an appreciation of modern computer design and its relation to system architecture, compiler technology, and operating system functionality. The course places an emphasis on design based on the measurement of performance and its dependency on parallelism, efficiency, latency, and resource utilization. "},
{"courseCode": "CS 451", "courseName": "Data-Intensive Distributed Computing", "courseDescription": "Introduces students to infrastructure for data-intensive computing, with a focus on abstractions, frameworks, and algorithms that allow developers to distribute computations across many machines.  Topics include core concepts (partitioning, replication, locality, consistency), computational models (MapReduce, dataflows, stream processing, bulk-synchronous parallel), and applications. [Offered: F,W]"},
{"courseCode": "CS 452", "courseName": "Real-time Programming", "courseDescription": "Intended to give students experience with tools and techniques of real-time programming, this course includes not only issues of microcomputer architecture and a real-time programming language and operating system, but also hands-on experience programming a microcomputer for applications such as process control, data acquisition and communication. "},
{"courseCode": "CS 454", "courseName": "Distributed Systems", "courseDescription": "An introduction to distributed systems, emphasizing the multiple levels of software in such systems. Specific topics include fundamentals of data communications, network architecture and protocols, local-area networks, concurrency control in distributed systems, recovery in distributed systems, and clock synchronization. "},
{"courseCode": "CS 456", "courseName": "Computer Networks", "courseDescription": "An introduction to network architectures and protocols, placing emphasis on protocols used in the Internet. Specific topics include application layer protocols, network programming, transport protocols, routing, multicast, data link layer issues, multimedia networking, network security, and network management. [Offered: F,W,S]"},
{"courseCode": "CS 457", "courseName": "System Performance Evaluation", "courseDescription": "Basic techniques of system performance evaluation. Specific topics include: performance modeling, discrete event simulation, verification and validation of simulation models, analysis of simulation output, analysis of single server queue and queueing networks, modeling of computer systems, networks, and other queueing or non-queueing systems. "},
{"courseCode": "CS 458", "courseName": "Computer Security and Privacy", "courseDescription": "Security and privacy issues in various aspects of computing. Specific topics include comparing security and privacy, program security, writing secure programs, controls against program threats, operating system security, formal security models, network security, Internet application security and privacy, privacy-enhancing technologies, database security and privacy, inference, data mining, security policies, physical security, economics of security, and legal and ethical issues. "},
{"courseCode": "CS 462", "courseName": "Formal Languages and Parsing", "courseDescription": "Languages and their representations. Grammars --Chomsky hierarchy. Regular sets and sequential machines. Context-free grammars -- normal forms, basic properties. Pushdown automata and transducers. Operations on languages. Undecidable problems in language theory. Applications to the design of programming languages and compiler construction."},
{"courseCode": "CS 466", "courseName": "Algorithm Design and Analysis", "courseDescription": "Algorithmic approaches and methods of assessment that reflect a broad spectrum of criteria, including randomized algorithms, amortized analysis, lower bounds, approximation algorithms, and on-line algorithms. Particular examples will be chosen from different areas of active research and application. [Offered: F,S]"},
{"courseCode": "CS 467", "courseName": "Introduction to Quantum Information Processing", "courseDescription": "Basics of computational complexity; basics of quantum information; quantum phenomena; quantum circuits and universality; relationship between quantum and classical complexity classes; simple quantum algorithms; quantum Fourier transform; Shor factoring algorithm; Grover search algorithm; physical realization of quantum computation; error-correction and fault-tolerance; quantum key distribution. [Offered: F, W]"},
{"courseCode": "CS 475", "courseName": "Computational Linear Algebra", "courseDescription": "Basic concepts and implementation of numerical linear algebra techniques and their use in solving application problems. Special methods for  solving linear systems having special features. Direct methods: symmetric, positive definite, band, general sparse structures, ordering methods.\nIterative methods: Jacobi, Gauss-Seidel, SOR, conjugate gradient. Computing and using orthogonal factorizations of matrices. QR and SVD methods for solving least squares problems. Eigenvalue and singular value decompositions. Computation and uses of these decompositions in practice.  "},
{"courseCode": "CS 476", "courseName": "Numeric Computation for Financial Modeling", "courseDescription": "The interaction of financial models, numerical methods, and computing environments. Basic computational aspects of option pricing and hedging. Numerical methods for stochastic differential equations, strong and weak convergence. Generating correlated random numbers. Time-stepping methods. Finite difference methods for the Black-Scholes equation. Discretization, stability, convergence. Methods for portfolio optimization, effect of data errors on portfolio weights. "},
{"courseCode": "CS 479", "courseName": "Neural Networks", "courseDescription": "An introduction to neural network methods, with some discussion of their relevance to neuroscience. Simple neuron models and networks of neurons. Training feedforward networks for classification or regression. Learning using the backpropagation of errors. Unsupervised learning methods. Optimal linear decoding. Recurrent neural networks. Convolutional neural networks. Advanced topics, including adversarial inputs and biologically plausible learning methods."},
{"courseCode": "CS 480", "courseName": "Introduction to Machine Learning", "courseDescription": "Introduction to modeling and algorithmic techniques for machines to learn concepts from data. Generalization: underfitting, overfitting, cross-validation. Tasks: classification, regression, clustering. Optimization-based learning: loss minimization. regularization. Statistical learning: maximum likelihood, Bayesian learning. Algorithms: nearest neighbour, (generalized) linear regression, mixtures of Gaussians, Gaussian processes, kernel methods, support vector machines, deep learning, sequence learning, ensemble techniques. Large scale learning: distributed learning and stream learning. Applications: Natural language processing, computer vision, data mining, human computer interaction, information retrieval. "},
{"courseCode": "CS 482", "courseName": "Computational Techniques in Biological Sequence Analysis", "courseDescription": "Computer science principles and algorithms in biological sequence analysis.  Topics include algorithms for sequence comparison, for large-scale database search in biological databases, for sequence assembly, for evolutionary tree reconstruction, for identifying important features in DNA and RNA sequences, and underlying computational techniques for understanding strings and trees and for making probabilistic inferences. [Offered: W]"},
{"courseCode": "CS 484", "courseName": "Computational Vision", "courseDescription": "Introduction to image and vision understanding by computer. Camera-system geometry, image formation and lighting, and image acquisition. Basic visual processes for recognition of edges, regions, lines, and surfaces. Processing of stereo images, and motion in image sequences. Object recognition. Applications of computer-vision systems. "},
{"courseCode": "CS 485", "courseName": "Statistical and Computational Foundations of Machine Learning", "courseDescription": "Extracting meaningful patterns from random samples of large data sets. Statistical analysis of the resulting problems. Common algorithmic paradigms for such tasks. Central concepts: VC-dimension, margins of a classifier, sparsity and description length, other types of regularization. Performance guarantees: generalization bounds, data dependent error bounds, and computational complexity of learning algorithms. Common paradigms: neural networks, kernel methods and support-vector machines, boosting, nearest neighbor classifiers. Applications to data mining."},
{"courseCode": "CS 486", "courseName": "Introduction to Artificial Intelligence", "courseDescription": "Goals and methods of artificial intelligence. Methods of general problem solving. Knowledge representation and reasoning. Planning. Reasoning about uncertainty. Machine learning. Multi-agent systems. Natural language processing. "},
{"courseCode": "CS 487", "courseName": "Introduction to Symbolic Computation", "courseDescription": "An introduction to the use of computers for symbolic mathematical computation, involving traditional mathematical computations such as solving linear equations (exactly), analytic differentiation and integration of functions, and analytic solution of differential equations. "},
{"courseCode": "CS 488", "courseName": "Introduction to Computer Graphics", "courseDescription": "Software and hardware for interactive computer graphics. Implementation of device drivers, 3-D transformations, clipping, perspective, and input routines. Data structures, hidden surface removal, colour shading techniques, and some additional topics will be covered. "},
{"courseCode": "CS 489", "courseName": "Advanced Topics in Computer Science", "courseDescription": "See the Course Offerings List for topics available."},
{"courseCode": "CS 490", "courseName": "Information Systems Management", "courseDescription": "The integration of business and technical considerations in the design, implementation and management of information systems. Topics include: IS planning and development; business, management, executive, and strategic information systems, including case studies of selected large- scale systems; decision support systems; end-user training and development; systems security, disaster planning and recovery. Practical examples of information systems in industry. [Offered: W,S]"},
{"courseCode": "CS 492", "courseName": "The Social Implications of Computing", "courseDescription": "This course is designed to consider the problems encountered by individuals, organizations and society as computer technology is adopted, with a view towards assessing possible courses of action. [Offered: W,S]"},
{"courseCode": "CS 493", "courseName": "Team Project 1", "courseDescription": "Students work in teams on substantial open-ended computer science problems as part of the CS 493/494 course sequence. Lectures describe project management fundamentals and ethical and legal issues in computing. Students form teams, select projects, define project goals, perform risk assessment, establish a project plan, and develop a prototype. Possible project topics can include development of software systems, analysis of extensions to existing systems across the field, and experimental computer science.[Offered: F]"},
{"courseCode": "CS 494", "courseName": "Team Project 2", "courseDescription": "Continuing from CS 493, student teams continue development of their project, update project plans, explore design alternatives, perform testing, and analyze experimental results.  Teams prepare and deliver technical presentations and demonstrations of their projects, and analyze ethical and legal aspects of their work. [Offered: W]"},
{"courseCode": "CS 497", "courseName": "Multidisciplinary Studies in Computer Science", "courseDescription": "See the Course Offerings list for topics available."},
{"courseCode": "CS 499R", "courseName": "Readings in Computer Science", "courseDescription": "Reading course as announced by the department."},
{"courseCode": "CS 499T", "courseName": "Honours Thesis", "courseDescription": "The student will undertake new analysis, synthesis, measurement, or experimentation to produce a document that demonstrates a depth of understanding of a topic that goes beyond what is obtained in a standard undergraduate education. "},
{"courseCode": "MATH 52", "courseName": "Pre-University Calculus", "courseDescription": "The concepts included are limits, derivatives, antiderivatives and definite integrals.  These concepts will be applied to solve problems of rates of change, maximum and minimum, curve sketching and areas. The classes of functions used to develop these concepts and applications are: polynomial, rational, trigonometric, exponential, and logarithmic."},
{"courseCode": "MATH 97", "courseName": "Study Abroad", "courseDescription": "For studies at other universities under approved exchange agreements."},
{"courseCode": "MATH 103", "courseName": "Introductory Algebra for Arts and Social Science", "courseDescription": "An introduction to applications of algebra to business, the behavioural sciences, and the social sciences. Topics will be chosen from linear equations, systems of linear equations, linear inequalities, functions, set theory, permutations and combinations, binomial theorem, probability theory. [Offered: F,W]"},
{"courseCode": "MATH 104", "courseName": "Introductory Calculus for Arts and Social Science", "courseDescription": "An introduction to applications of calculus in business, the behavioural sciences, and the social sciences. The models studied will involve polynomial, rational, exponential, and logarithmic functions. The major concepts introduced to solve problems are rate of change, optimization, growth and decay, and integration. [Offered: F,W]"},
{"courseCode": "MATH 106", "courseName": "Applied Linear Algebra 1", "courseDescription": "Systems of linear equations.  Matrix algebra.  Determinants.  Introduction to vector spaces.  Applications. [Offered: F,W,S]"},
{"courseCode": "MATH 114", "courseName": "Linear Algebra for Science", "courseDescription": "Vectors in 2- and 3-space and their geometry. Linear equations, matrices, and determinants. Introduction to vector spaces. Eigenvalues and diagonalization.  Applications. Complex numbers. [Offered: F]"},
{"courseCode": "MATH 115", "courseName": "Linear Algebra for Engineering", "courseDescription": "Linear equations, matrices and determinants. Introduction to vector spaces.  Eigenvalues and diagonalization. Applications. Complex numbers. [Offered: F]"},
{"courseCode": "MATH 116", "courseName": "Calculus 1 for Engineering", "courseDescription": "Functions: review of polynomials, exponential, logarithmic, trigonometric. Operations on functions, curve sketching. Trigonometric identities, inverse functions. Derivatives, rules of differentiation. Mean Value Theorem, Newton's Method. Indeterminate forms and L'Hopital's rule, applications. Integrals, approximations, Riemann definite integral, Fundamental Theorems. Applications of the integral. [Offered: F]"},
{"courseCode": "MATH 117", "courseName": "Calculus 1 for Engineering", "courseDescription": "Functions of engineering importance; review of polynomial, exponential, and logarithmic functions; trigonometric functions and identities. Inverse functions (logarithmic and trigonometric). Limits and continuity. Derivatives, rules of differentiation; derivatives of elementary functions. Applications of the derivative, max-min problems, Mean Value Theorem. Antiderivatives, the Riemann definite integral, Fundamental Theorems. Methods of integration, approximation, applications, improper integrals. [Offered: F]"},
{"courseCode": "MATH 118", "courseName": "Calculus 2 for Engineering", "courseDescription": "Methods of integration: by parts, trigonometric substitutions, partial fractions; engineering applications, approximation of integrals, improper integrals. Linear and separable first order differential equations, applications. Parametric curves and polar coordinates, arc length and area. Infinite sequences and series, convergence tests, power series and applications. Taylor polynomials and series, Taylor's Remainder Theorem, applications. [Offered: W,S]"},
{"courseCode": "MATH 119", "courseName": "Calculus 2 for Engineering", "courseDescription": "Elementary approximation methods: interpolation; Taylor polynomials and remainder; Newton's method, Landau order symbol, applications. Infinite series: Taylor series and Taylor's Remainder Theorem, geometric series, convergence test, power series, applications. Functions of several variables: partial derivatives, linear approximation and differential, gradient and directional derivative, optimization and Lagrange multipliers. Vector-valued functions:  parametric representation of curves, tangent and normal vectors, line integrals and applications. [Offered: W,S]"},
{"courseCode": "MATH 124", "courseName": "Calculus and Vector Algebra for Kinesiology", "courseDescription": "Review of trigonometry and basic algebra. Introduction to vectors in 2- and 3-space: sums, addition, dot products, cross products and angles between vectors. Solving linear systems in two and three variables. Functions of a real variable: powers, rational functions, trigonometric, exponential and logarithmic functions, their properties. Intuitive discussion of limits and continuity. Derivatives of elementary functions, derivative rules; applications to curve sketching, optimization. Relationships between distance, velocity, and acceleration. The definite integral, antiderivatives, the Fundamental Theorem of Calculus; change of variable and integration by parts; applications to area, centre of mass. [Offered: F]"},
{"courseCode": "MATH 127", "courseName": "Calculus 1 for the Sciences", "courseDescription": "Functions of a real variable: powers, rational functions, trigonometric, exponential and logarithmic functions, their properties and inverses. Intuitive discussion of limits and continuity. Definition and interpretation of the derivative, derivatives of elementary functions, derivative rules and applications. Riemann sums and other approximations to the definite integral. Fundamental theorems and antiderivatives; change of variable. Applications to area, rates, average value. [Offered: F,W,S; online: F,W,S]"},
{"courseCode": "MATH 128", "courseName": "Calculus 2 for the Sciences", "courseDescription": "Transforming and evaluating integrals; application to volumes and arc length; improper integrals. Separable and linear first order differential equations and applications. Introduction to sequences. Convergence of series; Taylor polynomials, Taylor's Remainder theorem, Taylor series and applications. Parametric/vector representation of curves; particle motion and arc length. Polar coordinates in the plane. [Offered: F,W,S; online: F,W,S]"},
{"courseCode": "MATH 135", "courseName": "Algebra for Honours Mathematics", "courseDescription": "An introduction to the language of mathematics and proof techniques  through a study of the basic algebraic systems of mathematics: the integers, the integers modulo n, the rational numbers, the real numbers, the complex numbers and polynomials. [Offered: F,W,S]"},
{"courseCode": "MATH 136", "courseName": "Linear Algebra 1 for Honours Mathematics", "courseDescription": "Systems of linear equations, matrix algebra, elementary matrices, computational issues. Real n-space, vector spaces and subspaces, basis and dimension, rank of a matrix, linear transformations, and matrix representations. Determinants, eigenvalues and diagonalization, applications. [Offered: F,W,S; online: F,W,S]"},
{"courseCode": "MATH 137", "courseName": "Calculus 1 for Honours Mathematics", "courseDescription": "Absolute values and inequalities. Sequences and their limits. Introduction to series. Limits of functions and continuity. The Intermediate Value theorem and approximate solutions to equations. Derivatives, linear approximation, and Newton's method. The Mean Value theorem and error bounds. Applications of the Mean Value theorem, Taylor polynomials and Taylor's theorem, Big-O notation. Suitable topics are illustrated using computer software. [Offered: F,W,S; online: F,W,S]"},
{"courseCode": "MATH 138", "courseName": "Calculus 2 for Honours Mathematics", "courseDescription": "Introduction to the Riemann integral and approximations. Antiderivatives and the fundamental theorem of calculus. Change of variables, methods of integration. Applications of the integral. Improper integrals. Linear and separable differential equations and applications. Tests for convergence for series. Binomial series, functions defined as power series and Taylor series. Vector (parametric) curves in R2. Suitable topics are illustrated using computer software. [Offered: F,W,S; online: F,W,S]"},
{"courseCode": "MATH 145", "courseName": "Algebra (Advanced Level)", "courseDescription": "MATH 145 is an advanced-level version of MATH 135. [Offered: F]"},
{"courseCode": "MATH 146", "courseName": "Linear Algebra 1 (Advanced Level)", "courseDescription": "MATH 146 is an advanced-level version of MATH 136. "},
{"courseCode": "MATH 147", "courseName": "Calculus 1 (Advanced Level)", "courseDescription": "MATH 147 is an advanced-level version of MATH 137. [Offered: F]"},
{"courseCode": "MATH 148", "courseName": "Calculus 2 (Advanced Level)", "courseDescription": "MATH 148 is an advanced-level version of MATH 138. "},
{"courseCode": "MATH 199", "courseName": "Mathematical Discovery and Invention", "courseDescription": "A course in problem solving in which intriguing and difficult problems are solved. Problems are taken mainly from the elementary parts of applied mathematics, computer science, statistics and actuarial science, pure mathematics, and combinatorics and optimization. Material relevant to the problems is taught in depth."},
{"courseCode": "MATH 207", "courseName": "Calculus 3 (Non-Specialist Level)", "courseDescription": "Multivariable functions and partial derivatives. Gradients. Optimization including Lagrange multipliers. Polar coordinates. Multiple integrals. Surface integrals on spheres and cylinders. Introduction to Fourier Series. [Offered: F,W,S]"},
{"courseCode": "MATH 211", "courseName": "Advanced Calculus 1 for Electrical and Computer Engineers", "courseDescription": "Fourier series. Ordinary differential equations. Laplace transform. Applications to linear electrical systems. [Offered: F,W]"},
{"courseCode": "MATH 212", "courseName": "Adv Calculus 2 for Electrical Engineers", "courseDescription": "Triple integrals, cylindrical and spherical polar coordinates. Divergence and curl, applications. Surface integrals, Green's, Gauss' and Stokes' theorems, applications. Complex functions, analytic functions, contour integrals, Cauchy's integral formula, Laurent series, residues. [Offered: F,S]"},
{"courseCode": "MATH 213", "courseName": "Signals, Systems, and Differential Equations", "courseDescription": "Fourier series. Differential equations. Laplace transforms. Applications to circuit analysis. [Offered: W]"},
{"courseCode": "MATH 215", "courseName": "Linear Algebra for Engineering", "courseDescription": "Systems of linear equations; their representation with matrices and vectors; their generalization to linear transformations on abstract vector spaces; and the description of these linear transformations through quantitative characteristics such as the determinant, the characteristic polynomial, eigenvalues and eigenvectors, the rank, and singular values. [Offered: F,W]"},
{"courseCode": "MATH 217", "courseName": "Calculus 3 for Chemical Engineering", "courseDescription": "Curves and surfaces in R3. Multivariable functions, partial derivatives, the chain rule, gradients. Optimization, Lagrange Multipliers. Double and triple integrals, change of variable. Vector fields, divergence and curl. Vector integral calculus: Green's theorem, the Divergence theorem and Stokes'  theorem. Applications in engineering are emphasized. [Offered: F,W]"},
{"courseCode": "MATH 218", "courseName": "Differential Equations for Engineers", "courseDescription": "First order equations, second order linear equations with constant coefficients, series solutions, the Laplace transform method, systems of linear differential equations. Applications in engineering are emphasized. [Offered: F,S]"},
{"courseCode": "MATH 225", "courseName": "Applied Linear Algebra 2", "courseDescription": "Vector spaces. Linear transformations and matrices. Inner products. Eigenvalues and eigenvectors. Diagonalization. Applications. [Offered: F,S; online: W]"},
{"courseCode": "MATH 227", "courseName": "Calculus 3 for Honours Physics", "courseDescription": "Directional derivative and the chain rule for multivariable functions. Optimization, Lagrange multipliers. Double and triple integrals on simple domains; transformations and Jacobians; change of variable in multiple integrals. Vector fields, divergence and curl. Vector integral calculus: Line and surface integrals, Green's Theorem, Stokes' Theorem, Gauss' Theorem, conservative vector fields. [Offered: F]"},
{"courseCode": "MATH 228", "courseName": "Differential Equations for Physics and Chemistry", "courseDescription": "First-order equations, second-order linear equations with constant coefficients, series solutions and special functions, the Laplace transform method. Applications in physics and chemistry are emphasized. [Offered: F,W; online: W,S]"},
{"courseCode": "MATH 229", "courseName": "Introduction to Combinatorics (Non-Specialist Level)", "courseDescription": "Introduction to graph theory: colourings, connectivity, Eulerian tours, planarity. Introduction to combinatorial analysis: elementary counting, generating series, binary strings. [Offered: F]"},
{"courseCode": "MATH 235", "courseName": "Linear Algebra 2 for Honours Mathematics", "courseDescription": "Orthogonal and unitary matrices and transformations. Orthogonal projections, Gram-Schmidt procedure, best approximations, least-squares. Inner products, angles and orthogonality, orthogonal diagonalization, singular value decomposition, applications. [Offered: F,W,S]"},
{"courseCode": "MATH 237", "courseName": "Calculus 3 for Honours Mathematics", "courseDescription": "Calculus of functions of several variables. Limits, continuity, differentiability, the chain rule. The gradient vector and the directional derivative. Taylor's formula. Optimization problems. Mappings and the Jacobian. Multiple integrals in various co-ordinate systems. "},
{"courseCode": "MATH 239", "courseName": "Introduction to Combinatorics", "courseDescription": "Introduction to graph theory: colourings, matchings, connectivity, planarity. Introduction to combinatorial analysis: generating series, recurrence relations, binary strings, plane trees. [Offered: F,W,S]"},
{"courseCode": "MATH 245", "courseName": "Linear Algebra 2 (Advanced Level)", "courseDescription": "MATH 245 is an advanced-level version of MATH 235. [Offered: F,S]"},
{"courseCode": "MATH 247", "courseName": "Calculus 3 (Advanced Level)", "courseDescription": "Topology of real n-dimensional space: completeness, closed and open sets, connectivity, compact sets, continuity, uniform continuity. Differential calculus on multivariable functions: partial differentiability, differentiability, chain rule, Taylor polynomials, extreme value problems. Riemann integration: Jordan content, integrability criteria, Fubini's theorem, change of variables. Local properties of continuously differentiable functions: open mapping theorem, inverse function theorem, implicit function theorem. [Offered: F,W,S]"},
{"courseCode": "MATH 249", "courseName": "Introduction to Combinatorics (Advanced Level)", "courseDescription": "MATH 249 is an advanced-level version of MATH 239. [Offered: F,W]"}
]